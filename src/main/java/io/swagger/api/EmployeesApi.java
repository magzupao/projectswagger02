/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Body;
import io.swagger.model.Body1;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-08-10T17:32:57.566+02:00[Europe/Prague]")
@Api(value = "employees", description = "the employees API")
public interface EmployeesApi {

    @ApiOperation(value = "Eliminar un empleado por ID", nickname = "employeesEmployeeIdDelete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Empleado eliminado exitosamente"),
        @ApiResponse(code = 404, message = "Empleado no encontrado") })
    @RequestMapping(value = "/employees/{employeeId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> employeesEmployeeIdDelete(@ApiParam(value = "",required=true) @PathVariable("employeeId") String employeeId);


    @ApiOperation(value = "Obtener un empleado por ID", nickname = "employeesEmployeeIdGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Detalles del empleado"),
        @ApiResponse(code = 404, message = "Empleado no encontrado") })
    @RequestMapping(value = "/employees/{employeeId}",
        method = RequestMethod.GET)
    ResponseEntity<Void> employeesEmployeeIdGet(@ApiParam(value = "",required=true) @PathVariable("employeeId") String employeeId);


    @ApiOperation(value = "Actualizar un empleado por ID", nickname = "employeesEmployeeIdPut", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Empleado actualizado exitosamente"),
        @ApiResponse(code = 404, message = "Empleado no encontrado") })
    @RequestMapping(value = "/employees/{employeeId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> employeesEmployeeIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Body1 body,@ApiParam(value = "",required=true) @PathVariable("employeeId") String employeeId);


    @ApiOperation(value = "Obtener todos los empleados", nickname = "employeesGet", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Lista de empleados") })
    @RequestMapping(value = "/employees",
        method = RequestMethod.GET)
    ResponseEntity<Void> employeesGet();


    @ApiOperation(value = "Crear un nuevo empleado", nickname = "employeesPost", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Empleado creado exitosamente") })
    @RequestMapping(value = "/employees",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> employeesPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Body body);

}
